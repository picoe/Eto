variables:
  build.increment: $[counter('buildnumber', 10000)]
  build.version: 2.5.0-ci-$(build.increment)
  build.configuration: Release
  build.arguments: /t:Package /p:Configuration=$(build.configuration) /p:BuildVersion=$(build.version) /p:Branch=$(Build.SourceBranch)
  build.dotnetversion: 3.1.x
  build.xamarinversion: 6_4_0

trigger:
  branches:
    include:
    - master
    - develop
  tags:
    include: 
    - '*'

jobs:
- job: Mac
  pool:
    vmImage: 'macOS-10.14'
  
  steps:
  - task: UseDotNet@2
    inputs:
      version: $(build.dotnetversion)
      
  - script: sudo $AGENT_HOMEDIRECTORY/scripts/select-xamarin-sdk.sh $(build.xamarinversion)
    displayName: 'Select Xamarin SDK version'
    
  - task: msbuild@1
    displayName: Build and Package
    inputs: 
      solution: build/Build.proj
      msbuildArguments: $(build.arguments) /v:minimal /bl:$(Build.ArtifactStagingDirectory)/msbuild-binlog/MSBuild.BuildPackage.MacOS.binlog

  - task: CopyFiles@2
    displayName: Copy nupkg
    inputs:
      contents: artifacts/nuget/$(build.configuration)/Eto.Platform.XamMac*.nupkg
      targetFolder: $(Build.ArtifactStagingDirectory)
      
  - task: PublishBuildArtifacts@1
    displayName: Publish XamMac nupkg
    inputs:
      pathtoPublish: $(Build.ArtifactStagingDirectory)/artifacts/nuget/$(build.configuration)
      artifactName: nuget
      publishLocation: container

#  - task: msbuild@1
#    displayName: Build MonoDevelop Addin
#    inputs:
#      solution: build/Build.proj
#      msbuildArguments: /t:BuildAddins
#
#  - task: CopyFiles@2
#    displayName: Copy MonoDevelop Addin
#    inputs:
#      contents: artifacts/addin/$(build.configuration)/net461/Eto.Addin.MonoDevelop*.mpack
#      targetFolder: $(Build.ArtifactStagingDirectory)
#
#  - task: PublishBuildArtifacts@1
#    displayName: Publish MonoDevelop Addin
#    inputs:
#      pathtoPublish: $(Build.ArtifactStagingDirectory)/artifacts/addin/$(build.configuration)/net461
#      artifactName: addins
#      publishLocation: container

  - task: PublishBuildArtifacts@1
    condition: failed()
    displayName: Publish MSBuild logs
    inputs:
      pathtoPublish: $(Build.ArtifactStagingDirectory)/msbuild-binlog
      artifactName: msbuild-binlog
      publishLocation: container                            
    
- job: Windows
  pool:
    vmImage: 'windows-2019'
  
  steps:
  - script: cinst gtksharp -y
    displayName: Install GTK#

  - task: UseDotNet@2
    inputs:
      version: $(build.dotnetversion)

  - task: msbuild@1
    displayName: Build and Package
    inputs: 
      solution: build/Build.proj
      msbuildArguments: $(build.arguments) /v:minimal /bl:$(Build.ArtifactStagingDirectory)/msbuild-binlog/MSBuild.BuildPackage.Windows.binlog

  - task: msbuild@1
    displayName: Build Visual Studio Addin
    inputs:
      solution: build/Build.proj
      msbuildArguments: /t:BuildAddins /v:minimal /bl:$(Build.ArtifactStagingDirectory)/msbuild-binlog/MSBuild.BuildAddins.Windows.binlog

  - task: PublishBuildArtifacts@1
    displayName: Publish nupkg
    inputs:
      pathtoPublish: artifacts/nuget/$(build.configuration)
      artifactName: nuget
      publishLocation: container
  - task: PublishBuildArtifacts@1
    displayName: Publish tests
    inputs:
      pathtoPublish: artifacts/test/$(build.configuration)
      artifactName: test
      publishLocation: container
  - task: PublishBuildArtifacts@1
    displayName: Publish samples
    inputs:
      pathtoPublish: artifacts/samples/$(build.configuration)
      artifactName: samples
      publishLocation: container
  - task: PublishBuildArtifacts@1
    displayName: Publish Visual Studio Addin
    inputs:
      pathtoPublish: artifacts/addin/$(build.configuration)/VisualStudio/Eto.Addin.VisualStudio.vsix
      artifactName: addins
      publishLocation: container
  - task: PublishBuildArtifacts@1
    condition: failed()
    displayName: Publish MSBuild logs
    inputs:
      pathtoPublish: $(Build.ArtifactStagingDirectory)/msbuild-binlog
      artifactName: msbuild-binlog
      publishLocation: container
