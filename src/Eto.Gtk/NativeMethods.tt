﻿<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<#

var pclass = new[] { "NMWindows", "NMLinux", "NMMac" };
var plat = new[] { "win32-", "x11-", "quartz-" };
var ext = new[] { "-0.dll", ".so.0", ".dylib" };
var extalt = new[] { ".dll", ".so.1", ".dylib" };

var giomethods = new[]
{
	"void g_signal_stop_emission_by_name(IntPtr instance, string name)"
};

var webkitmethods = new[]
{
	"IntPtr webkit_web_view_new()",
	"void webkit_web_view_load_uri(IntPtr web_view, string uri)",
	"string webkit_web_view_get_uri(IntPtr web_view)",
	"void webkit_web_view_load_html(IntPtr web_view, string content, string base_uri)",
	"string webkit_web_view_get_title(IntPtr web_view)",
	"void webkit_web_view_reload(IntPtr web_view)",
	"void webkit_web_view_stop_loading(IntPtr web_view)",
	"bool webkit_web_view_can_go_back(IntPtr web_view)",
	"void webkit_web_view_go_back(IntPtr web_view)",
	"bool webkit_web_view_can_go_forward(IntPtr web_view)",
	"void webkit_web_view_go_forward(IntPtr web_view)",
	"void webkit_web_view_run_javascript(IntPtr web_view, string script, IntPtr cancellable, Delegate callback, IntPtr user_data)",
	"IntPtr webkit_web_view_run_javascript_finish(IntPtr web_view, IntPtr result, IntPtr error)",
	"IntPtr webkit_javascript_result_get_global_context(IntPtr js_result)",
	"IntPtr webkit_javascript_result_get_value(IntPtr js_result)",
	"IntPtr JSValueToStringCopy(IntPtr context, IntPtr value, IntPtr idk)",
	"int JSStringGetMaximumUTF8CStringSize(IntPtr js_str_value)",
	"void JSStringGetUTF8CString(IntPtr js_str_value, IntPtr str_value, int str_length)",
	"void JSStringRelease(IntPtr js_str_value)",
	"IntPtr webkit_navigation_policy_decision_get_request(IntPtr decision)",
	"string webkit_uri_request_get_uri(IntPtr request)"
};

var gtkmethods = new[]
{
    "bool gtk_clipboard_wait_for_targets(IntPtr cp, out IntPtr atoms, out int number)",
    "void gtk_entry_set_placeholder_text(IntPtr entry, string text)",
    "IntPtr gtk_print_settings_get_page_ranges(IntPtr handle, out int num_ranges)",
    "IntPtr gtk_color_chooser_dialog_new(string title, IntPtr parent)",
    "void gtk_color_chooser_get_rgba(IntPtr chooser, out RGBA color)",
    "void gtk_color_chooser_set_rgba(IntPtr chooser, double[] color)",
    "void gtk_color_chooser_set_use_alpha(IntPtr chooser, bool use_alpha)",
    "bool gtk_color_chooser_get_use_alpha(IntPtr chooser)",
    "IntPtr gtk_font_chooser_dialog_new(string title, IntPtr parent)",
    "string gtk_font_chooser_get_font(IntPtr fontchooser)",
    "void gtk_font_chooser_set_font(IntPtr fontchooser, string fontname)",
    "IntPtr g_file_new_for_path(string path)",
    "IntPtr gtk_app_chooser_dialog_new(IntPtr parrent, int flags, IntPtr file)",
    "bool gtk_application_prefers_app_menu(IntPtr application)",
    "IntPtr gtk_header_bar_new()",
    "void gtk_window_set_titlebar(IntPtr window, IntPtr widget)",
    "void gtk_header_bar_pack_start(IntPtr bar, IntPtr child)",
    "void gtk_header_bar_pack_end(IntPtr bar, IntPtr child)",
    "void gtk_header_bar_set_show_close_button(IntPtr bar, bool setting)",
    "IntPtr gtk_selection_data_get_uris(IntPtr raw)",
    "bool gtk_selection_data_set_uris(IntPtr raw, IntPtr[] uris)",
    "bool gtk_print_unix_dialog_get_embed_page_setup(IntPtr raw)",
    "void gtk_print_unix_dialog_set_embed_page_setup(IntPtr raw, bool embed)",
    "IntPtr gtk_grid_get_child_at(IntPtr raw, int left, int top)",
    "IntPtr gtk_button_get_event_window(IntPtr button)",
    "uint gtk_get_major_version()",
    "uint gtk_get_minor_version()",
    "uint gtk_get_micro_version()",
	"void gtk_grab_add(IntPtr widget)",
	"void gtk_grab_remove(IntPtr widget)",
};

var gdkmethods = new[]
{
	"bool gdk_cairo_get_clip_rectangle(IntPtr context, IntPtr rect)",
    "IntPtr gdk_get_default_root_window()",
    "IntPtr gdk_pixbuf_get_from_window(IntPtr window, int x, int y, int width, int height)",
};

var pangomethods = new[]
{
	"bool pango_font_has_char(IntPtr font, int wc)"
};

var pangocairomethods = new []
{
	"IntPtr pango_cairo_font_map_new()",
	"void pango_cairo_font_map_set_default(IntPtr fontMap)"
};

var pangoft2methods = new []
{
	"IntPtr pango_fc_font_description_from_pattern(IntPtr fcpattern, bool includeSize)"
};

var fontconfigmethods = new []
{
	"bool FcInit()",
	"IntPtr FcConfigGetCurrent()",
	"bool FcConfigAppFontAddFile(IntPtr fc, string fileName)",
	"IntPtr FcConfigGetFonts(IntPtr fc, FcSetName setName)"
};

var methods = giomethods
	.Concat(gtkmethods)
	.Concat(webkitmethods)
	.Concat(gdkmethods)
	.Concat(pangomethods)
	.Concat(pangocairomethods)
	.Concat(pangoft2methods)
	.Concat(fontconfigmethods)
	.ToArray();

#>
using GLib;
using Gdk;

namespace Eto.GtkSharp
{
	static class NativeMethods
	{
#if GTK2
		const string ver = "2.0";
#elif GTK3
		const string ver = "3";
#endif

		public enum FcSetName : int
		{
		    FcSetSystem = 0,
	    	FcSetApplication = 1
		}

		[StructLayout(LayoutKind.Sequential)]
		public struct FcFontSet
		{
	    	public int		nfont;
	    	public int		sfont;
	    	public IntPtr	fonts;
		}

<#
	for (int i = 0; i < pclass.Length; i++)
	{
#>

		static class <#= pclass[i] #>
		{

#if NET

			static <#= pclass[i] #>()
			{
				NativeLibrary.SetDllImportResolver(typeof(<#= pclass[i] #>).Assembly, (name, assembly, path) =>
				{
					// Use custom import resolver for libwebkit2gtk
					// Try loading 4.1 first, if that fails, return to default handling
					if (name == libwebkit) 
					{
						IntPtr result = IntPtr.Zero;
						if (!NativeLibrary.TryLoad("libwebkit2gtk-4.1.so.0", assembly, path, out result))
						{
							return IntPtr.Zero;
						}

						return result;
					}

					return IntPtr.Zero;
				});
			}
#endif

#if GTK2
			const string plat = "<#= plat[i] #>";
#elif GTK3
			const string plat = "";
#endif
			const string ext = "<#= ext[i] #>";
			const string extalt = "<#= extalt[i] #>";
			const string libgobject = "libgobject-2.0" + ext;
			const string libgtk = "libgtk-" + plat + ver + ext;
			const string libgdk = "libgdk-" + plat + ver + ext;
			const string libpango = "libpango-1.0" + ext;
			const string libpangocairo = "libpangocairo-1.0" + ext;
			const string libpangoft2 = "libpangoft2-1.0" + ext;
			const string libfontconfig = "libfontconfig" + extalt;
			const string libwebkit = "libwebkit2gtk-4.0.so.37";
<#
		foreach (var method in giomethods)
		{
#>

			[DllImport(libgobject, CallingConvention = CallingConvention.Cdecl)]
			public extern static <#= method.StartsWith("string") ? "IntPtr" + method.Substring(6) : method #>;
<#
		}
#>
<#
		foreach (var method in webkitmethods)
		{
#>

			[DllImport(libwebkit, CallingConvention = CallingConvention.Cdecl)]
			public extern static <#= method.StartsWith("string") ? "IntPtr" + method.Substring(6) : method #>;
<#
		}
#>
<#
		foreach (var method in gtkmethods)
		{
#>

			[DllImport(libgtk, CallingConvention = CallingConvention.Cdecl)]
			public extern static <#= method.StartsWith("string") ? "IntPtr" + method.Substring(6) : method #>;
<#
		}
#>
<#
		foreach (var method in gdkmethods)
		{
#>

			[DllImport(libgdk, CallingConvention = CallingConvention.Cdecl)]
			public extern static <#= method.StartsWith("string") ? "IntPtr" + method.Substring(6) : method #>;
<#
		}
#>
<#
		foreach (var method in pangomethods)
		{
#>
			[DllImport(libpango, CallingConvention = CallingConvention.Cdecl)]
			public extern static <#= method.StartsWith("string") ? "IntPtr" + method.Substring(6) : method #>;
<#
		}
#>
<#
		foreach (var method in pangocairomethods)
		{
#>
			[DllImport(libpangocairo, CallingConvention = CallingConvention.Cdecl)]
			public extern static <#= method.StartsWith("string") ? "IntPtr" + method.Substring(6) : method #>;
<#
		}
#>
<#
		foreach (var method in pangoft2methods)
		{
#>
			[DllImport(libpangoft2, CallingConvention = CallingConvention.Cdecl)]
			public extern static <#= method.StartsWith("string") ? "IntPtr" + method.Substring(6) : method #>;
<#
		}
#>
<#
		foreach (var method in fontconfigmethods)
		{
#>
			[DllImport(libpangoft2, CallingConvention = CallingConvention.Cdecl)]
			public extern static <#= method.StartsWith("string") ? "IntPtr" + method.Substring(6) : method #>;
<#
		}
#>
		}
<#
	}
#>

		public static string GetString(IntPtr handle)
		{
			if (handle == IntPtr.Zero)
				return "";

			int len = 0;
			while (Marshal.ReadByte(handle, len) != 0)
				len++;

			var bytes = new byte[len];
			Marshal.Copy(handle, bytes, 0, bytes.Length);
			return Encoding.UTF8.GetString(bytes);
		}
<#
	foreach (var method in methods)
	{
#>

		public static <#= method #>
		{
<#
			var main = method.Split(new char[] { '(', ')' });
            var meth = main[0].Split(' ');
            var ret = "";

            if (main[1] != "")
            {
                var args = main[1].Split(',');

                foreach (var arg in args)
                {
                    var split = arg.Trim(' ').Split(' ');

                    if (split.Length == 2)
                        ret += ", " + split[1];
                    else
                        ret += ", " + split[0] + " " + split[2];
                }

                ret = ret.Substring(2);
            }

            ret = meth[1] + "(" + ret + ")" + main[2];

            var hasret = "";
            var extrafunc = "";
            var extrafuncend = "";

            if (meth[0] != "void")
            	hasret = "return ";

            if (meth[0] == "string")
            {
            	extrafunc = "GetString(";
            	extrafuncend = ")";
            }
#>
			if (EtoEnvironment.Platform.IsLinux)
				<#= hasret #><#= extrafunc #><#= pclass[1]#>.<#= ret #><#= extrafuncend #>;
			else if (EtoEnvironment.Platform.IsMac)
				<#= hasret #><#= extrafunc #><#= pclass[2]#>.<#= ret #><#= extrafuncend #>;
			else
				<#= hasret #><#= extrafunc #><#= pclass[0]#>.<#= ret #><#= extrafuncend #>;
		}
<#
	}
#>
	}
}
