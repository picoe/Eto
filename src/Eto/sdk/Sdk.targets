<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="15.0">

  <PropertyGroup>
    <BuildPlatform Condition="$(BuildPlatform) == 'WinForms'">Windows</BuildPlatform>

    <UseMacOSWorkload Condition="$(UseMacOSWorkload) == '' AND $(BuildPlatform) == 'MacOS'">True</UseMacOSWorkload>
  </PropertyGroup>

  <PropertyGroup Condition="$(BuildPlatform) == '' ">
    <!-- Detect the platform to build for based on current OS and runtime identifier, if not specified -->
    <BuildPlatform Condition="$(UseWinForms) != 'True' and (($([MSBuild]::IsOSPlatform(Windows)) and $(RuntimeIdentifier) == '') or $(RuntimeIdentifier.StartsWith('win')))">Wpf</BuildPlatform>
    <BuildPlatform Condition="$(UseWinForms) == 'True' and (($([MSBuild]::IsOSPlatform(Windows)) and $(RuntimeIdentifier) == '') or $(RuntimeIdentifier.StartsWith('win')))">Windows</BuildPlatform>
    <BuildPlatform Condition="$(UseMacOSWorkload) != 'True' and (($([MSBuild]::IsOSPlatform(OSX)) and $(RuntimeIdentifier) == '') or $(RuntimeIdentifier.StartsWith('osx')))">Mac64</BuildPlatform>
    <BuildPlatform Condition="$(UseMacOSWorkload) == 'True' and (($([MSBuild]::IsOSPlatform(OSX)) and $(RuntimeIdentifier) == '') or $(RuntimeIdentifier.StartsWith('osx')))">MacOS</BuildPlatform>
    <BuildPlatform Condition="($([MSBuild]::IsOSPlatform(Linux)) and $(RuntimeIdentifier) == '') or $(RuntimeIdentifier.StartsWith('linux'))">Gtk</BuildPlatform>
  </PropertyGroup>


  <PropertyGroup>
    <!-- Windows requires windows TFM suffix -->
    <_TfmSuffix Condition="$(BuildPlatform) == 'Wpf' or $(BuildPlatform) == 'Windows'">-windows</_TfmSuffix>
    <!-- MacOS requires macos TFM suffix -->
    <_TfmSuffix Condition="$(BuildPlatform) == 'MacOS'">-macos</_TfmSuffix>

    <OutputType Condition="$(OutputType) == 'Exe' and ($(BuildPlatform) == 'Wpf' or $(BuildPlatform) == 'Windows')">WinExe</OutputType>
    
    <!-- Need to set this with the macos target if not specified -->
    <SupportedOSPlatformVersion Condition="$(SupportedOSPlatformVersion) == '' AND ( $(BuildPlatform) == 'macos' )">10.14</SupportedOSPlatformVersion>
    <RuntimeIdentifiers Condition="$(BuildPlatform) == 'macos' AND $(RuntimeIdentifiers) == '' AND $(RuntimeIdentifier) == ''">osx-x64;osx-arm64</RuntimeIdentifiers>
  </PropertyGroup>

  <PropertyGroup Condition="$(TargetFramework) != '' and $(_TfmSuffix) != '' and !$(TargetFramework.Contains('-'))">
    <!-- Add proper TargetFramework suffix -->
    <TargetFramework Condition="!$(TargetFramework.StartsWith('net4')) and !$(TargetFramework.Contains($(_TfmSuffix)))">$(TargetFramework)$(_TfmSuffix)</TargetFramework>
  </PropertyGroup>

  <!-- Fix up target frameworks for platform-specific tfm's -->
  <PropertyGroup Condition="$(TargetFrameworks) != '' and !$(TargetFrameworks.Contains('-')) and $(_TfmSuffix) != ''">
    <_CurrentFrameworks>$(TargetFrameworks)</_CurrentFrameworks>

    <!-- We need to calculate each target framework individually, doing a replace on it as a whole string doesn't work.
         Is there a better way? -->
    <TargetFrameworks></TargetFrameworks>
    <TargetFrameworks Condition="$(_CurrentFrameworks.Contains('net4'))">$(TargetFrameworks);$([System.Text.RegularExpressions.Regex]::Match($(_CurrentFrameworks), '(?&lt;=;|^)?(net4\d+)(?=;|$)'))</TargetFrameworks>
    <TargetFrameworks Condition="$([System.Text.RegularExpressions.Regex]::IsMatch($(_CurrentFrameworks), '(?&lt;=;|^)?(net6\.\d)(?=;|$)'))">$(TargetFrameworks);net6.0$(_TfmSuffix)</TargetFrameworks>
    <TargetFrameworks Condition="$([System.Text.RegularExpressions.Regex]::IsMatch($(_CurrentFrameworks), '(?&lt;=;|^)?(net7\.\d)(?=;|$)'))">$(TargetFrameworks);net7.0$(_TfmSuffix)</TargetFrameworks>
    <TargetFrameworks Condition="$([System.Text.RegularExpressions.Regex]::IsMatch($(_CurrentFrameworks), '(?&lt;=;|^)?(net8\.\d)(?=;|$)'))">$(TargetFrameworks);net8.0$(_TfmSuffix)</TargetFrameworks>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Eto.Forms" Version="2.8.4-dev" />
    <PackageReference Include="Eto.Platform.$(BuildPlatform)" Version="2.8.4-dev" />
    <PackageReference Include="Eto.Serialization.Json" Version="2.8.4-dev" Condition="$(UseJeto) == 'True'" />
    <PackageReference Include="Eto.Serialization.Xaml" Version="2.8.4-dev" Condition="$(UseXeto) == 'True'" />
  </ItemGroup>

  <PropertyGroup>
    <!-- Each platform gets its own intermediate and output path so they don't conflict -->
    <BaseIntermediateOutputPath Condition="$(BaseIntermediateOutputPath) == ''">obj\</BaseIntermediateOutputPath>

    <IntermediateOutputPath Condition="$(IntermediateOutputPath) == ''">$(BaseIntermediateOutputPath)</IntermediateOutputPath>
    <IntermediateOutputPath>$(IntermediateOutputPath)$(BuildPlatform)\$(Configuration)\</IntermediateOutputPath>

    <BaseOutputPath Condition="$(BaseOutputPath) == ''">bin\</BaseOutputPath>
    <OutputPath Condition="$(MacIsBuildingBundle) != 'True' and $(OutputPath) == ''">$(BaseOutputPath)</OutputPath>
    <OutputPath Condition="$(MacIsBuildingBundle) != 'True'">$(OutputPath)$(BuildPlatform)\$(Configuration)\</OutputPath>
  </PropertyGroup>

  <PropertyGroup Condition="$(RuntimeIdentifiers) == '' and !$(TargetFramework.Contains('-'))">
    <RuntimeIdentifiers Condition="$(BuildPlatform) == 'Mac64' OR $(BuildPlatform) == 'MacOS'">osx-x64;osx-arm64</RuntimeIdentifiers>
    <RuntimeIdentifiers Condition="$(BuildPlatform) == 'Wpf' OR $(BuildPlatform) == 'Windows' or $(BuildPlatform) == 'Direct2D'">win-x64</RuntimeIdentifiers>
    <RuntimeIdentifiers Condition="$(BuildPlatform) == 'Gtk'">linux-x64</RuntimeIdentifiers>
  </PropertyGroup>

  <Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk" />

</Project>