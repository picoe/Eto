<?xml version="1.0" encoding="UTF-8"?>
<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  
  <Import Project="$(MSBuildThisFileDirectory)MSBuildTaskHelper.props" Condition="'$(MSBuildTaskHelpersImported)'!='true'"/>
  <UsingTask TaskName="_GetCommonFiles" TaskFactory="$(MSBuildTaskFactoryType)" AssemblyFile="$(MSBuildTasksAssemblyFile)">
    <ParameterGroup>
      <Files ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <Names ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <Result ParameterType="Microsoft.Build.Framework.ITaskItem[]" Output="true" />
    </ParameterGroup>
    <Task>
      <Code Type="Fragment" Language="cs">
        <![CDATA[  
        var result = new List<ITaskItem>();
        foreach (var fileItem in Files)
        {  
          string name = fileItem.GetMetadata("Filename");
          foreach (var nameItem in Names)
          {
            if (string.Equals(name, nameItem.ItemSpec, StringComparison.OrdinalIgnoreCase))
            {
              result.Add(new TaskItem(fileItem.ItemSpec));
              break;
            }
          }
        }  
        Result = result.ToArray();
        ]]>
      </Code>
    </Task>
  </UsingTask>
  <Target Name="_EmbedReferencedAssemblies" Condition="$(EmbedReferences) != ''" AfterTargets="ResolveAssemblyReferences">
    <PropertyGroup>
      <EmbedDebugSymbols Condition="$(EmbedDebugSymbols) == ''">false</EmbedDebugSymbols>
      <EmbedPrefix Condition="$(EmbedPrefix) == ''">References</EmbedPrefix>
      <EmbedPrefix>$(EmbedPrefix).</EmbedPrefix>
    </PropertyGroup>
    <!-- Embed only specified references -->
    <_GetCommonFiles Files="@(ReferencePath)" Names="$(EmbedReferences)" Condition="$(EmbedReferences) != 'True'">
      <Output ItemName="EmbedReferences" TaskParameter="Result" />
    </_GetCommonFiles>
    <ItemGroup>
      <!-- Embed all copy local references -->
      <EmbedReferences Include="@(ReferenceCopyLocalPaths)" Condition="$(EmbedReferences) == 'True'" />
      <!-- Find files to embed and exclude -->
      <FilesToEmbed Include="@(EmbedReferences)" Condition="'%(EmbedReferences.Extension)' == '.dll'" />
      <FilesToEmbed Include="@(EmbedReferences)" Condition="$(EmbedDebugSymbols) == 'True' AND '%(EmbedReferences.Extension)' == '.pdb'" />
      <FilesToExclude Include="@(EmbedReferences)" Condition="$(EmbedDebugSymbols) != 'True' AND '%(EmbedReferences.Extension)' == '.pdb'" />
      <FilesToExclude Include="@(EmbedReferences)" Condition="'%(EmbedReferences.Extension)' == '.xml'" />
      <EmbeddedResource Include="@(FilesToEmbed)">
        <LogicalName>$(EmbedPrefix)%(FilesToEmbed.DestinationSubDirectory)%(FilesToEmbed.Filename)%(FilesToEmbed.Extension)</LogicalName>
      </EmbeddedResource>
      <!-- no need to copy the assemblies locally anymore -->
      <ReferenceCopyLocalPaths Remove="@(FilesToEmbed)" />
      <ReferenceCopyLocalPaths Remove="@(FilesToExclude)" />
    </ItemGroup>
    <Message Importance="high" Text="Embedding: @(FilesToEmbed->'%(Filename)%(Extension)', ', ')" />
  </Target>
  <Import Condition="Exists('$(BasePath)..\Eto.Common.targets')" Project="$(BasePath)..\Eto.Common.targets" />

  <Target Name="FixGtkReferences" Condition="$(FixGtkReferences)=='true'" BeforeTargets="BeforeBuild">
    <ItemGroup>
      <GtkAssemblyFiles Include="\Library\Frameworks\Mono.framework\Versions\Current\lib\mono\gac\**\*.dll" Condition="Exists('\Library\Frameworks\Mono.framework\Versions\Current\lib\mono\gac')" />
      <GtkAssemblyFiles Include="\lib\mono\gac\**\*.dll" Condition="Exists('\lib\mono\gac')" />
      <GtkAssemblyPaths Include="@(GtkAssemblyFiles->'%(RootDir)%(Directory)')"/>
    </ItemGroup>
    
    <PropertyGroup>
      <AssemblySearchPaths>$(AssemblySearchPaths);{GAC}</AssemblySearchPaths>
      <AssemblySearchPaths>$(AssemblySearchPaths);@(GtkAssemblyPaths->'%(Identity)', ';')</AssemblySearchPaths>
    </PropertyGroup>
    <!-- 
    Set the path of gtk references explicitly for linux msbuild support.
    msbuild on linux crashes with gtk references and uses the wrong references when 
    both Gtk#2 and Gtk#3 are installed.
    It's most likely because the Reference.Filename incorrectly includes the ", Version=" portion of the reference.
    -->
    <PropertyGroup>
      <CliReferencePath Condition="$(CliReferencePath)==''">/usr/lib/cli/</CliReferencePath>
    </PropertyGroup>
    <ItemGroup>
      <!-- collect the references we need to update -->
      <GtkReference Include="%(Reference.Identity)" Condition="%(Reference.Name) != '' and %(Reference.Name)!=%(Reference.Filename) and Exists('$(CliReferencePath)%(Reference.Name)-%(Reference.PackageVersion)/%(Reference.Name).dll')">
        <Name>%(Reference.Name)</Name>
        <FusionName>%(Reference.Identity)</FusionName>
        <PackageVersion>%(Reference.PackageVersion)</PackageVersion>
      </GtkReference>
      <!-- remove old references -->
      <Reference Remove="%(GtkReference.Identity)" />
      <!-- insert them back without the full version and a direct hint path -->
      <Reference Include="%(GtkReference.Name)">
        <HintPath>$(CliReferencePath)%(GtkReference.Name)-%(GtkReference.PackageVersion)/%(GtkReference.Name).dll</HintPath>
        <Private>False</Private>
        <SpecificVersion>True</SpecificVersion>
        <FusionName>%(GtkReference.FusionName)</FusionName>
      </Reference>
    </ItemGroup>
    <!--
    <Message Text="%(Reference.Filename) - %(Reference.HintPath)" Importance="high" />
    -->
  </Target>
  
  <PropertyGroup>
    <!-- why oh why do we need to specify both explicitly -->
    <AssemblyTitle Condition="$(Title) != '' AND $(AssemblyTitle) == ''">$(Title)</AssemblyTitle>
  </PropertyGroup>
  
  
  <Target Name="_AddFileVersionAttribute" BeforeTargets="CoreGenerateAssemblyInfo">
    <!-- We add this here so it doesn't trigger a rebuild due to changing based on time -->
    <ItemGroup>
      <AssemblyAttribute Include="System.Reflection.AssemblyFileVersionAttribute" Condition="'$(FileVersion)' != ''">
        <_Parameter1>$(FileVersion)</_Parameter1>
      </AssemblyAttribute>
    </ItemGroup>
    
  </Target>

  <ItemGroup>
    <None Remove="**\*.tt" />
  </ItemGroup>

  <Target Name="Transform" BeforeTargets="BeforeBuild" Inputs="@(TextTemplate)" Outputs="%(TextTemplate.RelativeDir)%(TextTemplate.Filename).cs" Condition="$(MSBuildRuntimeType) == 'Core'">
    <Message Text="Transforming T4 templates..." Importance="high" />
    <ItemGroup>
      <Compile Remove="%(TextTemplate.RelativeDir)%(TextTemplate.Filename).cs" />
    </ItemGroup>
    <Exec Command="dotnet tool restore" />
    <Exec WorkingDirectory="$(ProjectDir)" Command="dotnet t4 %(TextTemplate.Identity) --out %(TextTemplate.RelativeDir)%(TextTemplate.Filename).cs"/>
    <ItemGroup>
      <Compile Include="%(TextTemplate.RelativeDir)%(TextTemplate.Filename).cs" />
    </ItemGroup>
  </Target>


<UsingTask
  TaskName="GetMetadata"
  TaskFactory="$(MSBuildTaskFactoryType)" AssemblyFile="$(MSBuildTasksAssemblyFile)">
  <ParameterGroup>
    <ItemGroup ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
    <Output Output="true" />
  </ParameterGroup>
  <Task>
    <Using Namespace="System"/>
    <Code Type="Fragment" Language="cs">
      <![CDATA[
          var command = new StringBuilder();
          foreach (ITaskItem item in ItemGroup )
          {
              command.AppendLine(string.Format("ItemName={0}", item));
              foreach (string parameter in item.MetadataNames)
              {
                  command.AppendLine(string.Format("  {0}={1}", parameter, item.GetMetadata(parameter)));
              }
              command.AppendLine();
          }
          Output = command.ToString();
      ]]>
    </Code>
  </Task>
</UsingTask>  

</Project>