<?xml version="1.0" encoding="UTF-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- Xamarin.Mac support for sdk style projects

    Set UseXamarinMac or UseXamarinMacBinding to True and import this at the end of your .csproj
  -->
  <PropertyGroup>
    <XamarinMacPath>\Library\Frameworks\Xamarin.Mac.framework\Versions\Current\</XamarinMacPath>
    <XamarinMacLibPath>$(XamarinMacPath)lib\mono\</XamarinMacLibPath>
    <XamarinMacTargetsPath>$(XamarinMacPath)lib\msbuild\</XamarinMacTargetsPath>
    <HasXamarinMac Condition="!Exists('$(XamarinMacTargetsPath)Xamarin.Mac.CSharp.targets')">False</HasXamarinMac>
    <HasXamarinMac Condition="$(HasXamarinMac) == ''">True</HasXamarinMac> <!-- VS for Mac needs this, Exists isn't evaluated -->

    <EnableDefaultImageAssets Condition="$(EnableDefaultImageAssets) == ''">True</EnableDefaultImageAssets>
  </PropertyGroup>

  <PropertyGroup Condition="$(UseXamarinMac) == 'True' OR $(UseXamarinMacBinding) == 'True'">
    <OutputType Condition="$(OutputType) == 'WinExe'">Exe</OutputType>
    <ProjectTypeGuids Condition="$(UseXamarinMacBinding) != 'True'">{A3F8F2AB-B479-4A4A-A458-A89E7DC349F1};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <ProjectTypeGuids Condition="$(UseXamarinMacBinding) == 'True'">{810C163F-4746-4721-8B8E-88A3673A62EA};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>

    <UseXamarinMac>True</UseXamarinMac>
    <IsXamarinMacMobile Condition="$(TargetFramework.StartsWith('xamarinmac')) == 'True'">True</IsXamarinMacMobile>
    <DefineConstants>$(DefineConstants);XAMMAC;XAMMAC2;UNIFIED</DefineConstants>

    <_XamMacLanguage Condition="$(MSBuildProjectFile.EndsWith('.csproj'))">CSharp</_XamMacLanguage>
    <_XamMacLanguage Condition="$(MSBuildProjectFile.EndsWith('.fsproj'))">FSharp</_XamMacLanguage>
    <_XamMacLanguage Condition="$(MSBuildProjectFile.EndsWith('.vbproj'))">VisualBasic</_XamMacLanguage> <!-- not actually supported -->

    <LanguageTargets Condition="$(HasXamarinMac) == 'True' AND $(UseXamarinMacBinding) != 'True'">$(XamarinMacTargetsPath)Xamarin.Mac.$(_XamMacLanguage).targets</LanguageTargets>
    <LanguageTargets Condition="$(HasXamarinMac) == 'True' AND $(UseXamarinMacBinding) == 'True'">$(XamarinMacTargetsPath)Xamarin.Mac.ObjcBinding.$(_XamMacLanguage).targets</LanguageTargets>

    <TargetFrameworkIdentifier Condition="$(IsXamarinMacMobile) == 'True'">Xamarin.Mac</TargetFrameworkIdentifier>
    <TargetFrameworkVersion Condition="$(IsXamarinMacMobile) == 'True'">v2.0</TargetFrameworkVersion>

    <MacBuildBundle>False</MacBuildBundle>
    <UseSGen Condition="$(UseSGen) == ''">True</UseSGen>
    <AOTMode Condition="$(AOTMode) == ''">None</AOTMode>

    <!-- stuff needed for .NET Core tooling -->
    <FrameworkPathOverride Condition="$(IsXamarinMacMobile) != 'True'">$(XamarinMacLibPath)4.5\</FrameworkPathOverride>
    <FrameworkPathOverride Condition="$(IsXamarinMacMobile) == 'True'">$(XamarinMacLibPath)Xamarin.Mac\</FrameworkPathOverride>
    <MSBuildRuntimeVersion Condition="$(MSBuildRuntimeVersion) == '' or $(MSBuildRuntimeVersion) &lt; '16.8'">16.8</MSBuildRuntimeVersion>
  </PropertyGroup>

    <!-- stuff needed for .NET Core tooling -->
  <PropertyGroup Condition="'$(FrameworkPathOverride)' != '' AND $(IsXamarinMacMobile) == 'True'">
    <_FullFrameworkReferenceAssemblyPaths>$(FrameworkPathOverride)</_FullFrameworkReferenceAssemblyPaths>
    <_TargetFrameworkDirectories>$(FrameworkPathOverride)</_TargetFrameworkDirectories>
  </PropertyGroup>

  <PropertyGroup Condition="$(UseXamarinMac) == 'True' AND $(TargetFramework.StartsWith('xamarinmac')) != 'True'">
    <UseXamMacFullFramework>true</UseXamMacFullFramework>
  </PropertyGroup>

  <ItemGroup Condition="$(UseXamarinMac) == 'True' AND $(DisableImplicitFrameworkReferences) != 'True'">
    <Reference Include="System" />
    <Reference Include="System.Core" />
    <Reference Include="System.Xml" />
    <Reference Include="Xamarin.Mac" />
    <Reference Include="$(FrameworkPathOverride)Facades\*.dll" />
  </ItemGroup>

  <ItemGroup Condition="$(UseXamarinMac) == 'True'">
    <ProjectReference Update="@(ProjectReference)" />

    <AvailableItemName Include="ObjcBindingApiDefinition" />
    <AvailableItemName Include="ObjcBindingCoreSource" />
    <AvailableItemName Include="NativeReference" />
    <AvailableItemName Include="ImageAsset" />

  </ItemGroup>

  <ItemGroup Condition="$(UseXamarinMac) == 'True'">
    <!-- Doesn't actually work for some reason.. -->
    <ImageAsset Include="Assets.xcassets\**\*" Condition="$(EnableDefaultImageAssets) == 'True'" />
  </ItemGroup>

  <ItemGroup Condition="$(UseXamarinMac) == 'True' AND $(EnableDefaultNoneItems) != 'False' AND $(EnableDefaultContentItems) != 'False'">
    <None Remove="*.icns" />
    <Content Include="*.icns" />
  </ItemGroup>

  <ItemGroup Condition="$(UseXamarinMac) == 'True' AND $(EnableDefaultCompileItems) != 'False'">
    <Compile Remove="@(ObjcBindingApiDefinition)" />
    <Compile Remove="@(ObjcBindingCoreSource)" />

    <None Remove="@(ImageAsset)" />

    <None Include="Info.plist" Condition="$(OutputType) == 'Exe' OR $(OutputType) == 'WinExe'" />

    <Compile Update="**\*.designer.cs">
      <DependentUpon>$([System.String]::Copy('%(Filename)').Replace('.designer', ''))%(Extension)</DependentUpon>
    </Compile>
  </ItemGroup>

  <Target Name="_XamarinMacRemoveImplicitReference" BeforeTargets="BeforeBuild" Condition="$(UseXamarinMac) == 'True'">
    <ItemGroup>
      <!-- System.Drawing doesn't exist even when targetting full framework -->
      <Reference Remove="System.Drawing" Condition="$(DisableImplicitFrameworkReferences) != 'True'" />
    </ItemGroup>
  </Target>

  <Target Name="_XamMacAddLogicalPaths" BeforeTargets="CollectPackageReferences" Condition="$(UseXamarinMac) == 'True'">
    <!-- Ensure we have a logical name, as Xamarin.Mac uses it to figure out paths but implicit entries don't have it -->
    <ItemGroup>
      <None Update="@(None)" LogicalName="%(Identity)" Condition="%(None.LogicalName) == ''" />
      <Content Update="@(Content)" LogicalName="%(Identity)" Condition="%(Content.LogicalName) == ''" />
      <ImageAsset Update="@(ImageAsset)" LogicalName="%(Identity)" Condition="%(ImageAsset.LogicalName) == ''" />
      <BundleResource Update="@(BundleResource)" LogicalName="%(Identity)" Condition="%(BundleResource.LogicalName) == ''" />
    </ItemGroup>

  </Target>

</Project>
