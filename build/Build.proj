<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" DefaultTargets="Package" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" InitialTargets="PrintInfo">
  <Import Project="$(MSBuildThisFileDirectory)Common.props" />
  
  <PropertyGroup>
    <Configuration Condition="$(Configuration) == ''">Release</Configuration>
    <PackageTargets Condition="$(PackageTargets) == ''">Build</PackageTargets>
    <BuildVersion Condition="$(BuildVersion) == ''"></BuildVersion>
    <HasVSWin Condition="$(HasVSWin) == '' and $(OSPlatform) == 'Windows'">True</HasVSWin>
    <HasVSMac Condition="$(HasVSMac) == '' and $(OSPlatform) != 'Windows'">True</HasVSMac>
  </PropertyGroup>

  <Target Name="PrintInfo" Condition="$(PrintInfo) != 'False'">
    <PropertyGroup>
      <PrintInfo>False</PrintInfo>
      <BuildVersion Condition="$(BuildBranch.StartsWith('refs/tags/'))">$(BuildBranch.Substring(10))</BuildVersion>
    </PropertyGroup>
    <Message Text="Building:" Importance="high" />
    <Message Text="  Configuration: $(Configuration)" Importance="high" />
    <Message Text="  Platform: $(OSPlatform)" Importance="high" />
  </Target>

  <Import Project="Utilities.targets" Condition="$(UtilitiesImported) == ''" />

  <Target Name="UpdateVersion" Condition="$(BuildVersion) != ''">
    <Message Text="Set Version: $(BuildVersion)" Condition="$(BuildVersion) != ''" />

    <PropertyGroup>
      <BuildIncrement Condition="$(BuildVersion) == '' and $(BuildIncrement) == ''">0.1.0.0</BuildIncrement>
      <BuildVersion Condition="$(BuildVersion) == ''">$(CurrentVersion)</BuildVersion>
      <CurrentVersion>$(Version)</CurrentVersion>
    </PropertyGroup>

    <Message Text="Current Version: $(CurrentVersion)" Condition="$(CurrentVersion) != ''" />
    <Message Text="Incrementing by: $(BuildIncrement)" Condition="$(BuildIncrement) != ''" />

    <IncrementVersion Version="$(BuildVersion)" Increment="$(BuildIncrement)">
      <Output TaskParameter="AssemblyVersion" PropertyName="AssemblyVersion" />
      <Output TaskParameter="AssemblyInformationalVersion" PropertyName="AssemblyInformationalVersion" />
      <Output TaskParameter="AssemblyVersionThreePart" PropertyName="AssemblyVersionThreePart" />
      <Output TaskParameter="AssemblyVersionBeforeRelease" PropertyName="AssemblyVersionBeforeRelease" />
    </IncrementVersion>

    <Message Text="New Version: $(AssemblyVersion)" Importance="high" />
    <Message Text="New Informational Version: $(AssemblyInformationalVersion)" Importance="high" />

    <FileUpdate Files="$(BasePath)build\Common.props"
      WarnOnNoUpdate="true"
      Pattern='(?&lt;=&lt;InformationalVersion\\s*[^&gt;]+?&gt;)[^&lt;]+(?=&lt;/InformationalVersion&gt;)'
      Replacement='$(AssemblyInformationalVersion)' />

    <FileUpdate Files="$(BasePath)build\Common.props"
      WarnOnNoUpdate="true"
      Pattern='(?&lt;=&lt;Version\\s*[^&gt;]+?&gt;)[^&lt;]+(?=&lt;/Version&gt;)'
      Replacement='$(AssemblyVersion)' />

    <FileUpdate Files="$(BasePath)appveyor.yml"
      WarnOnNoUpdate="true"
      Pattern='((?&lt;=^version:\\s+)(.+?)(?=[.]\\{build\\}))|((?&lt;=BUILD_VERSION[=]\\s*)([^-]+?)(?=[-]\w+))'
      Replacement='$(AssemblyVersionThreePart)' />

    <FileUpdate Files="$(BasePath)azure-pipelines.yml"
      WarnOnNoUpdate="true"
      Pattern='(?&lt;=^\\s*build.version:\\s+)([\\d.]+)(?=[-]\\w+)'
      Replacement='$(AssemblyVersionThreePart)' />

    <FileUpdate Files="$(AddinDir)Eto.Addin.MonoDevelop\Properties\AddinInfo.cs"
      WarnOnNoUpdate="true"
      Pattern='(?&lt;=^\\s*Version\\s*=\\s*[&quot;])(.+?)(?=[&quot;]\\s*$)'
      Replacement='$(AssemblyVersionBeforeRelease)' />

    <FileUpdate Files="$(AddinDir)Eto.Addin.VisualStudio\source.extension.vsixmanifest"
      WarnOnNoUpdate="true"
      Pattern='(?&lt;=^\\s*&lt;Identity\\s+Id=&quot;Eto.Addin.VisualStudio&quot;.+?Version=&quot;)(.+?)(?=&quot;\\s+)'
      Replacement='$(AssemblyVersionBeforeRelease)' />

    <PropertyGroup>
      <PackageFiles>$(AddinDir)Eto.Forms.Templates\Eto.Forms.Templates.csproj</PackageFiles>
    </PropertyGroup>

    <MSBuild Targets="UpdateReference" Properties="ReferenceName=(Eto([\\.][\\w]+)+);ReferenceVersion=$(AssemblyInformationalVersion);PackageFiles=$(PackageFiles);PrintInfo=False" Projects="$(MSBuildProjectFile)"/>

  </Target>

  <Target Name="UpdateGtk">

    <!-- easier way to update all Gtk references -->
    <MSBuild Targets="UpdateReference" Properties="ReferenceName=((Gdk|Gtk|Gio|GLib|Atk|Cairo|Pango)Sharp);ReferenceVersion=$(ReferenceVersion)" Projects="$(MSBuildProjectFile)"/>

  </Target>

  <Target Name="UpdateReference">

    <Error Condition="$(ReferenceName) == '' or $(ReferenceVersion) == ''" Text="Must Specify ReferenceName and ReferenceVersion properties" />

    <PropertyGroup>
      <ReferenceName>$(ReferenceName.Replace('.', '\\.'))</ReferenceName>
      <ReplaceVersionPattern>([\\d][\\.\\d\\-\\w]+)</ReplaceVersionPattern>
    </PropertyGroup>

    <ItemGroup>
      <TemplateFiles Include="$(TemplateFiles)" Condition="$(TemplateFiles) != ''" />
      <TemplateFiles Include="$(SourceDir)Addins\Eto.Addin.VisualStudio\**\*.vstemplate" />
      <TemplateFiles Include="$(SourceDir)Addins\Eto.Addin.MonoDevelop\**\*.xpt.xml" />
      <TemplateFiles Include="$(SourceDir)Addins\Eto.Addin.MonoDevelop\Properties\Manifest.addin.xml" />

      <ProjFiles Include="$(ProjFiles)" Condition="$(ProjFiles) != ''" />
      <ProjFiles Include="$(BasePath)**\*.csproj" />
      <ProjFiles Include="$(BasePath)**\*.fsproj" />

      <PackageFiles Include="$(PackageFiles)" Condition="$(PackageFiles) != ''" />
    </ItemGroup>

    <!-- references to old style packages -->
    <FileUpdate Files="@(ProjFiles)"
      WarnOnNoUpdate="false"
            Pattern="(?&lt;=[\\\\]packages[\\\\]$(ReferenceName)\\.)$(ReplaceVersionPattern)(?=[\\\\])"
            Replacement='$(ReferenceVersion)' />

    <!-- references to nuget template package -->
    <FileUpdate Files="@(ProjFiles)"
      WarnOnNoUpdate="false"
            Pattern="(?&lt;=$(ReferenceName)[\\.])$(ReplaceVersionPattern)(?=\\.nupkg)"
            Replacement='$(ReferenceVersion)' />

    <!-- single line PackageReference -->
    <FileUpdate Files="@(ProjFiles)"
      WarnOnNoUpdate="false"
            Pattern="(?&lt;=&lt;PackageReference.+?Include\\s*[=]\\s*&quot;$(ReferenceName)&quot;.+?Version\\s*[=]\\s*&quot;)$(ReplaceVersionPattern)(?=&quot;)"
            Replacement='$(ReferenceVersion)' />

    <!-- multi-line PackageReference -->
    <FileUpdate Files="@(ProjFiles)"
      WarnOnNoUpdate="false"
            Pattern="(?&lt;=&lt;PackageReference.+?Include\\s*[=]\\s*&quot;$(ReferenceName)&quot;.*&gt;\\s*&lt;Version&gt;)$(ReplaceVersionPattern)(?=&lt;)"
            Replacement='$(ReferenceVersion)' />

    <!-- PackageVersion tag in sdk-style projects -->
    <FileUpdate Files="@(PackageFiles)"
      WarnOnNoUpdate="false"
            Pattern="(?&lt;=&lt;PackageVersion&gt;)$(ReplaceVersionPattern)(?=&lt;/PackageVersion&gt;)"
            Replacement='$(ReferenceVersion)' />

    <FileUpdate Files="@(TemplateFiles)"
      WarnOnNoUpdate="false"
            Pattern="(?&lt;=id\\s*[=]\\s*&quot;$(ReferenceName)&quot;\\s+version\\s*=\\s*&quot;)$(ReplaceVersionPattern)(?=&quot;)"
            Replacement='$(ReferenceVersion)' />

    <FileUpdate Files="@(TemplateFiles)"
      WarnOnNoUpdate="false"
            Pattern="(?&lt;=$(ReferenceName)[\\.])$(ReplaceVersionPattern)(?=\\.nupkg)"
            Replacement='$(ReferenceVersion)' />
  </Target>

  <Target Name="BuildHelpShfb" DependsOnTargets="Build">
    <PropertyGroup>
      <SHFBVersion>2017.12.30.2</SHFBVersion>
      <SHFBPath>$(MSBuildThisFileDirectory)..\artifacts\packages\EWSoftware.SHFB.$(SHFBVersion)\tools\</SHFBPath>
      <SHFBLib>$([MSBUILD]::Unescape($(SHFBPath)MSBuild.Community.Tasks.dll))</SHFBLib>
      <SHFBROOT Condition=" '$(SHFBROOT)' == '' ">$(SHFBPath)</SHFBROOT>
    </PropertyGroup>
    <Exec Command='nuget install EWSoftware.SHFB -OutputDirectory "$(MSBuildThisFileDirectory)..\artifacts\packages"' Condition="! Exists('$(SHFBPath)')" />

    <MSBuild Projects="$(MSBuildThisFileDirectory)help\Help.shfbproj" Properties="Configuration=$(Configuration)" />
  </Target>

  <ItemGroup>
    <StandalonePackage Include="$(SourceDir)Eto.Forms.Sample\Eto.Forms.Sample.csproj" />
    <StandalonePackage Include="$(AddinDir)Eto.Forms.Templates\Eto.Forms.Templates.csproj" />
  </ItemGroup>

  <!-- Build all source code -->
  <Target Name="Build" DependsOnTargets="UpdateVersion">

    <PropertyGroup>
      <BuildProperties>Configuration=$(Configuration);Platform=$(OSPlatform)</BuildProperties>
    </PropertyGroup>

    <MSBuild Projects="$(SourceDir)Eto.sln" Targets="Restore" Properties="$(BuildProperties);_RestoreEnforceEvaluate=True" />
    <MSBuild Projects="$(SourceDir)Eto.sln" Targets="$(PackageTargets)" Properties="$(BuildProperties)" />

    <!-- When building windows, assume xamarin.mac is installed and build XamMac2 platform 
      Note: works when compiling through VS 2017 but not msbuild command line.. why?
      <MSBuild Projects="$(SourceDir)Eto.sln" Targets="Eto_XamMac2_modern:$(PackageTargets)" Properties="Configuration=$(Configuration);Platform=Mac" Condition="$(OSPlatform) == 'Windows'"/>
      <MSBuild Projects="$(SourceDir)Eto.sln" Targets="Eto_XamMac2_net45:$(PackageTargets)" Properties="Configuration=$(Configuration);Platform=Mac" Condition="$(OSPlatform) == 'Windows'"/>
      -->

    <MSBuild Projects="$(BasePath)samples\Samples.sln" Targets="Restore" Properties="$(BuildProperties);_RestoreEnforceEvaluate=True"/>
    <MSBuild Projects="$(BasePath)samples\Samples.sln" Targets="$(PackageTargets)" Properties="$(BuildProperties)"/>
  </Target>

  <!-- Package everything up into nuget packages -->
  <Target Name="Package" DependsOnTargets="Build">
    <MSBuild Projects="$(SourceDir)Eto.sln" Targets="Pack" Properties="$(BuildProperties);IsPacking=True" />

    <!-- build dotnet template -->
    <MSBuild Projects="%(StandalonePackage.Identity)" Targets="Restore" Properties="Configuration=$(Configuration);_RestoreEnforceEvaluate=True" />
    <MSBuild Projects="%(StandalonePackage.Identity)" Targets="Pack" Properties="Configuration=$(Configuration);IsPacking=True" />
  </Target>
  
  <!-- Generate all permutations of the templates for testing -->
  <Target Name="GenerateTemplates">

    <RemoveDir Directories="$(ArtifactsDir)templates"/>

    <!-- install the current version of the templates -->
    <Exec Command="dotnet new -i $(PackageOutputPath)Eto.Forms.Templates.$(InformationalVersion).nupkg" />

    <!-- generate project templates -->
    <ItemGroup>
      <Language Include="fs" Value="F#" />
      <Language Include="cs" Value="C#" />

      <Mode Include="code" />
      <Mode Include="preview" />
      <Mode Include="xaml" />
      <Mode Include="json" />

      <OtherOptions Include="none" Value="" />
      <OtherOptions Include="wf" Value="-wf" />
      <OtherOptions Include="xm" Value="-xm" />
      <OtherOptions Include="wf_xm" Value="-wf -xm" />

      <Combined Include="separate" Value="" />
      <Combined Include="combined" Value="-c" />

      <Framework Include="full" />
      <Framework Include="core" />
      <Framework Include="both" />

      <CombinedProject1 Include="*" LanguageId="%(Language.Identity)" Language="%(Language.Value)" />
      <CombinedProject2 Include="@(CombinedProject1)" ModeId="%(Mode.Identity)" Mode="%(Mode.Identity)" />
      <CombinedProject3 Include="@(CombinedProject2)" CombinedId="%(Combined.Identity)" Combined="%(Combined.Value)" />
      <CombinedProject4 Include="@(CombinedProject3)" FrameworkId="%(Framework.Identity)" Framework="%(Framework.Identity)" />
      <CombinedProject Include="@(CombinedProject4)" OtherId="%(OtherOptions.Identity)" Other="%(OtherOptions.Value)" />
    </ItemGroup>

    <Exec Command="export DOTNET_NEW_LOCAL_SEARCH_FILE_ONLY=TRUE &amp;&amp; dotnet new etoapp -m %(CombinedProject.Mode) -sln -lang %(Language) %(Other) %(Combined) -f %(Framework) -o $(ArtifactsDir)templates\App.%(LanguageId)-%(CombinedId)-%(OtherId)-%(ModeId)-%(FrameworkId)" />

    <!-- generate file templates -->
    <ItemGroup>
      <Base Include="panel" Value="Panel" />
      <Base Include="form" Value="Form" />
      <Base Include="dialog" Value="Dialog" />

      <CombinedFile1 Include="*" LanguageId="%(Language.Identity)" Language="%(Language.Value)" />
      <CombinedFile2 Include="@(CombinedFile1)" ModeId="%(Mode.Identity)" Mode="%(Mode.Identity)" />
      <CombinedFile Include="@(CombinedFile2)" BaseId="%(Base.Identity)" Base="%(Base.Value)" />
    </ItemGroup>

    <Exec Command="dotnet new etofile -m %(CombinedFile.Mode) -b %(Base) -o $(ArtifactsDir)templates\File_%(LanguageId)-%(ModeId)-%(Base)" />

  </Target>

  <!-- build the MD/VS for Mac and/or the VS addin, depending on your platform -->
  <Target Name="BuildAddins">
    <!-- monodevelop/VS for Mac -->
    <MSBuild Projects="$(AddinDir)Eto.Addin.MonoDevelop.sln" Targets="Restore" Properties="Configuration=$(Configuration);_RestoreEnforceEvaluate=True" Condition="$(HasVSMac) == 'True'" />
    <MSBuild Projects="$(AddinDir)Eto.Addin.MonoDevelop.sln" Targets="Build" Properties="Configuration=$(Configuration)" Condition="$(HasVSMac) == 'True'" />
    <MSBuild Projects="$(AddinDir)Eto.Addin.MonoDevelop\Eto.Addin.MonoDevelop.csproj" Targets="PackageAddin" Properties="Configuration=$(Configuration)" Condition="$(HasVSMac) == 'True'" />

    <!-- Visual Studio Addin -->
    <MSBuild Projects="$(AddinDir)Eto.Addin.VisualStudio.sln" Targets="Restore" Properties="Configuration=$(Configuration);_RestoreEnforceEvaluate=True" Condition="$(HasVSWin) == 'True'" />
    <MSBuild Projects="$(AddinDir)Eto.Addin.VisualStudio.sln" Targets="Build" Properties="Configuration=$(Configuration);DeployExtension=false" Condition="$(HasVSWin) == 'True'" />
  </Target>
  
  <Target Name="Clean">
    <RemoveDir Directories="$(ArtifactsDir)"/>
    <RemoveDir Directories="$(SourceDir)packages"/>
    <RemoveDir Directories="$(BasePath)samples\packages"/>
    <RemoveDir Directories="$(SourceDir)Addins\packages"/>
  </Target>

</Project>
