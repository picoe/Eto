<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildThisFileDirectory)Common.props" />
  
  <PropertyGroup>
    <Configuration Condition="$(Configuration) == ''">Release</Configuration>
    <PackageTargets Condition="$(PackageTargets) == ''">Build</PackageTargets>
    <BuildVersion Condition="$(BuildVersion) == ''"></BuildVersion>
    <HasVSWin Condition="$(HasVSWin) == '' and $(OSPlatform) == 'Windows'">True</HasVSWin>
    <HasVSMac Condition="$(HasVSMac) == '' and $(OSPlatform) != 'Windows'">True</HasVSMac>

    <BuildProperties>Configuration=$(Configuration);Platform=$(OSPlatform)</BuildProperties>
  </PropertyGroup>

  <Target Name="PrintInfo" Condition="$(PrintInfo) != 'False'">
    <PropertyGroup>
      <PrintInfo>False</PrintInfo>
    </PropertyGroup>
    <Message Text="Building:" Importance="high" />
    <Message Text="  Configuration: $(Configuration)" Importance="high" />
    <Message Text="  Platform: $(OSPlatform)" Importance="high" />
    <Message Text="  PackageVersion: $(PackageVersion)" Importance="high" />
    <Message Text="  InformationalVersion: $(InformationalVersion)" Importance="high" />
  </Target>

  <Import Project="Utilities.targets" Condition="$(UtilitiesImported) == ''" />

  <Target Name="UpdateVersion">

    <IncrementVersion Version="$(PackageVersion)">
      <Output TaskParameter="AssemblyVersion" PropertyName="AssemblyVersion" />
      <Output TaskParameter="AssemblyInformationalVersion" PropertyName="AssemblyInformationalVersion" />
      <Output TaskParameter="AssemblyVersionThreePart" PropertyName="AssemblyVersionThreePart" />
      <Output TaskParameter="AssemblyVersionBeforeRelease" PropertyName="AssemblyVersionBeforeRelease" />
    </IncrementVersion>

    <Message Text="New Version: $(AssemblyInformationalVersion)" Importance="high" Condition="$(AssemblyInformationalVersion) != '$(DevVersion)-dev'" />

    <FileUpdate Files="$(BasePath)build\Common.props"
      WarnOnNoUpdate="true"
      Pattern='(?&lt;=&lt;DevVersion&gt;)[^&lt;]+(?=&lt;/DevVersion&gt;)'
      Replacement='$(AssemblyVersionThreePart)' />

    <FileUpdate Files="$(BasePath)build\Common.props"
      WarnOnNoUpdate="true"
      Pattern='(?&lt;=&lt;Version\s*[^&gt;]+?&gt;)[^&lt;]+(?=&lt;/Version&gt;)'
      Replacement='$(AssemblyVersion)' />

    <PropertyGroup>
      <PackageFiles>$(SourceDir)Eto.Forms.Templates\Eto.Forms.Templates.csproj</PackageFiles>
      <ProjFiles>$(BasePath)src\Eto\sdk\Sdk.targets</ProjFiles>
    </PropertyGroup>

    <MSBuild Targets="UpdateReference" Properties='ReferenceName=(Eto[.][^"]+);ReferenceVersion=$(AssemblyInformationalVersion);PackageFiles=$(PackageFiles);ProjFiles=$(ProjFiles);PrintInfo=False' Projects="$(MSBuildProjectFile)"/>

  </Target>

  <Target Name="UpdateGtk">

    <!-- easier way to update all Gtk references -->
    <MSBuild Targets="UpdateReference" Properties="ReferenceName=((Gdk|Gtk|Gio|GLib|Atk|Cairo|Pango)Sharp);ReferenceVersion=$(ReferenceVersion)" Projects="$(MSBuildProjectFile)"/>

  </Target>

  <Target Name="UpdateReference">

    <Error Condition="$(ReferenceName) == '' or $(ReferenceVersion) == ''" Text="Must Specify ReferenceName and ReferenceVersion properties" />

    <PropertyGroup>
      <ReferenceName>$(ReferenceName.Replace('.', '\.'))</ReferenceName>
      <ReplaceVersionPattern>([\d][\.\d\-\w]+)</ReplaceVersionPattern>
    </PropertyGroup>

    <ItemGroup>
      <TemplateFiles Include="$(TemplateFiles)" Condition="$(TemplateFiles) != ''" />

      <ProjFiles Include="$(ProjFiles)" Condition="$(ProjFiles) != ''" />
      <ProjFiles Include="$(BasePath)**\*.csproj" />
      <ProjFiles Include="$(BasePath)**\*.fsproj" />
      <ProjFiles Include="$(BasePath)**\*.vbproj" />

      <PackageFiles Include="$(PackageFiles)" Condition="$(PackageFiles) != ''" />
    </ItemGroup>

    <!-- references to nuget template package -->
    <FileUpdate Files="@(ProjFiles)"
      WarnOnNoUpdate="false"
            Pattern="(?&lt;=$(ReferenceName)[\.])$(ReplaceVersionPattern)(?=\.nupkg)"
            Replacement='$(ReferenceVersion)' />

    <!-- single line PackageReference -->
    <FileUpdate Files="@(ProjFiles)"
      WarnOnNoUpdate="false"
            Pattern="(?&lt;=&lt;PackageReference.+?Include\s*[=]\s*&quot;$(ReferenceName)&quot;.+?Version\s*[=]\s*&quot;)$(ReplaceVersionPattern)(?=&quot;)"
            Replacement='$(ReferenceVersion)' />

    <!-- multi-line PackageReference -->
    <FileUpdate Files="@(ProjFiles)"
      WarnOnNoUpdate="false"
            Pattern="(?&lt;=&lt;PackageReference.+?Include\s*[=]\s*&quot;$(ReferenceName)&quot;.*&gt;\s*&lt;Version&gt;)$(ReplaceVersionPattern)(?=&lt;)"
            Replacement='$(ReferenceVersion)' />

    <!-- Sdk version -->
    <FileUpdate Files="@(ProjFiles)"
      WarnOnNoUpdate="false"
            Pattern='(?&lt;=&lt;Project Sdk\s*[=]\s*&quot;$(ReferenceName)[/])$(ReplaceVersionPattern)(?="&gt;)'
            Replacement='$(ReferenceVersion)' />

    <!-- PackageVersion tag in sdk-style projects -->
    <FileUpdate Files="@(PackageFiles)"
      WarnOnNoUpdate="false"
            Pattern="(?&lt;=&lt;PackageVersion&gt;)$(ReplaceVersionPattern)(?=&lt;/PackageVersion&gt;)"
            Replacement='$(ReferenceVersion)' />

    <FileUpdate Files="@(TemplateFiles)"
      WarnOnNoUpdate="false"
            Pattern="(?&lt;=id\s*[=]\s*&quot;$(ReferenceName)&quot;\s+version\s*=\s*&quot;)$(ReplaceVersionPattern)(?=&quot;)"
            Replacement='$(ReferenceVersion)' />

    <FileUpdate Files="@(TemplateFiles)"
      WarnOnNoUpdate="false"
            Pattern="(?&lt;=$(ReferenceName)[\.])$(ReplaceVersionPattern)(?=\.nupkg)"
            Replacement='$(ReferenceVersion)' />
  </Target>

  <Target Name="BuildHelpShfb" DependsOnTargets="BuildCore">
    <PropertyGroup>
      <SHFBVersion>2017.12.30.2</SHFBVersion>
      <SHFBPath>$(MSBuildThisFileDirectory)..\artifacts\packages\EWSoftware.SHFB.$(SHFBVersion)\tools\</SHFBPath>
      <SHFBLib>$([MSBUILD]::Unescape($(SHFBPath)MSBuild.Community.Tasks.dll))</SHFBLib>
      <SHFBROOT Condition=" '$(SHFBROOT)' == '' ">$(SHFBPath)</SHFBROOT>
    </PropertyGroup>
    <Exec Command='nuget install EWSoftware.SHFB -OutputDirectory "$(MSBuildThisFileDirectory)..\artifacts\packages"' Condition="! Exists('$(SHFBPath)')" />

    <MSBuild Projects="$(MSBuildThisFileDirectory)help\Help.shfbproj" Properties="Configuration=$(Configuration)" />
  </Target>

  <Target Name="Build" DependsOnTargets="BuildCore;Package;BuildSamples">
  </Target>

  <!-- Build all source code -->
  <Target Name="BuildCore" DependsOnTargets="UpdateVersion;PrintInfo">
    <MSBuild Projects="$(SourceDir)Eto.sln" Targets="Restore" Properties="$(BuildProperties);_RestoreEnforceEvaluate=True" />
    <MSBuild Projects="$(SourceDir)Eto.sln" Targets="$(PackageTargets)" Properties="$(BuildProperties)" />
  </Target>

  <Target Name="BuildSamples" DependsOnTargets="BuildCore">
    <MSBuild Projects="$(BasePath)samples\Samples.sln" Targets="Restore" Properties="$(BuildProperties);_RestoreEnforceEvaluate=True"/>
    <MSBuild Projects="$(BasePath)samples\Samples.sln" Targets="$(PackageTargets)" Properties="$(BuildProperties)"/>
  </Target>

  <!-- Package everything up into nuget packages -->
  <Target Name="Package">
    <MSBuild Projects="$(SourceDir)Eto.sln" Targets="Restore" Properties="$(BuildProperties);IsPacking=True;_RestoreEnforceEvaluate=True" />
    <MSBuild Projects="$(SourceDir)Eto.sln" Targets="Pack" Properties="$(BuildProperties);IsPacking=True" />

    <ItemGroup>
      <EtoFormsPackages Include="$([System.IO.Directory]::GetDirectories('$(ArtifactsDir)packages', 'eto.*'))" Condition="Exists('$(ArtifactsDir)packages')"/>
    </ItemGroup>

    <RemoveDir Directories="@(EtoFormsPackages)" />
  </Target>

  <Target Name="SetupNugetConfig">
    <PropertyGroup>
      <NugetConfigPath>$(ArtifactsDir)nuget.config</NugetConfigPath>
      <NugetPackagesPath>$(ArtifactsDir)packages</NugetPackagesPath>
    </PropertyGroup>

    <!-- <RemoveDir Directories="$(NugetPackagesPath)"/> -->

    <Exec Command='dotnet new nugetconfig -o $(ArtifactsDir) &amp;&amp; dotnet nuget add source "./nuget/$(Configuration)" --name eto-local --configfile "$(NugetConfigPath)"'
          Condition="!Exists('$(NugetConfigPath)')" />
  </Target>
  
  <!-- Generate all permutations of the templates for testing -->
  <Target Name="GenerateTemplates" DependsOnTargets="Package;SetupNugetConfig">

    <RemoveDir Directories="$(ArtifactsDir)templates"/>

    <!-- install the current version of the templates -->
    <Exec Command="dotnet new -u Eto.Forms.Templates" />
    <Exec Command="dotnet new -i $(PackageOutputPath)Eto.Forms.Templates.$(InformationalVersion).nupkg" />
  
    <!-- generate project templates -->
    <ItemGroup>
      <Language Include="cs" Value="C#" />
      <Language Include="fs" Value="F#" />
      <Language Include="vb" Value="VB" />

      <Mode Include="code" />
      <Mode Include="json" />
      <Mode Include="preview" />
      <Mode Include="xaml" />

      <Combined Include="combined" Value="-c" />
      <Combined Include="separate" Value="" />

      <Framework Include="net60" Value="net6.0" />
      <Framework Include="net48" Value="net48" />

      <OtherOptions Include="none" Value="" />
      <OtherOptions Include="macos" Value="-macos" />
      <OtherOptions Include="wf" Value="-wf" />
      <OtherOptions Include="wf_macos" Value="-wf -macos" />

      <CombinedProject1 Include="*" LanguageId="%(Language.Identity)" Language="%(Language.Value)" />
      <CombinedProject2 Include="@(CombinedProject1)" CombinedId="%(Combined.Identity)" Combined="%(Combined.Value)" />
      <CombinedProject3 Include="@(CombinedProject2)" FrameworkId="%(Framework.Identity)" Framework="%(Framework.Value)" />
      <CombinedProject4 Include="@(CombinedProject3)" OtherId="%(OtherOptions.Identity)" Other="%(OtherOptions.Value)" />
      <CombinedProject Include="@(CombinedProject4)" ModeId="%(Mode.Identity)" Mode="%(Mode.Identity)" />
      <CombinedProject Update="@(CombinedProject)"
        OutputPath="$(ArtifactsDir)templates\App.%(LanguageId)-%(CombinedId)-%(OtherId)-%(ModeId)-%(FrameworkId)"
        ProjectName="App.%(LanguageId)-%(CombinedId)-%(OtherId)-%(ModeId)-%(FrameworkId)" />

      <!-- Combined Rules -->

      <!-- By default, use dotnet build to build combined project-->
      <CombinedProject Update="@(CombinedProject)"
        Condition="%(CombinedId) == 'combined'"
        BuildCommand="&amp;&amp; dotnet build" />
      <!-- macos doesn't support VB -->
      <CombinedProject Remove="@(CombinedProject)"
        Condition="%(CombinedId) == 'combined' and %(LanguageId) == 'vb' and (%(OtherId) == 'macos' or %(OtherId) == 'wf_macos')" />
      <!-- Wpf doesn't support F#  -->
      <CombinedProject Remove="@(CombinedProject)"
        Condition="$([MSBuild]::IsOSPlatform(Windows)) and %(CombinedId) == 'combined' and %(LanguageId) == 'fs' and (%(OtherId) != 'wf_macos' and %(OtherId) != 'wf')" />

      <!-- Separate Rules -->

      <!-- Build Wpf on Windows -->
      <CombinedProject Update="@(CombinedProject)"
        Condition="%(CombinedId) == 'separate'"
        BuildCommand="&amp;&amp; cd %(ProjectName).Wpf &amp;&amp; dotnet build &amp;&amp; cd .." />

      <!-- Build WinForms on Windows -->
      <CombinedProject Update="@(CombinedProject)"
        Condition="%(CombinedId) == 'separate' and ( %(OtherId) == 'wf_macos' or %(OtherId) == 'wf' )"
        BuildCommand="%(BuildCommand) &amp;&amp; cd %(ProjectName).WinForms &amp;&amp; dotnet build &amp;&amp; cd .." />

      <!-- Build Mac -->
      <CombinedProject Update="@(CombinedProject)"
        Condition="%(CombinedId) == 'separate'"
        BuildCommand="%(BuildCommand) &amp;&amp; cd %(ProjectName).Mac &amp;&amp; dotnet build &amp;&amp; cd .." />

      <!-- Build Gtk -->
      <CombinedProject Update="@(CombinedProject)"
        Condition="%(CombinedId) == 'separate'"
        BuildCommand="%(BuildCommand) &amp;&amp; cd %(ProjectName).Gtk &amp;&amp; dotnet build &amp;&amp; cd .." />

      <!-- Build MacOS -->
      <CombinedProject Update="@(CombinedProject)"
        Condition="%(CombinedId) == 'separate' and (%(OtherId) == 'macos' or %(OtherId) == 'wf_macos')"
        BuildCommand="%(BuildCommand) &amp;&amp; dotnet build **/*.MacOS.*proj" />

    </ItemGroup>

    <Exec Command="dotnet new etoapp -m %(CombinedProject.Mode) -sln -lang %(Language) %(Other) %(Combined) -f %(Framework) -o %(OutputPath) &amp;&amp; cd %(OutputPath) %(BuildCommand)"  EnvironmentVariables="NUGET_PACKAGES=$(NugetPackagesPath);DOTNET_NEW_LOCAL_SEARCH_FILE_ONLY=1" />

    <!-- generate file templates -->
    <ItemGroup>
      <Base Include="panel" Value="Panel" />
      <Base Include="form" Value="Form" />
      <Base Include="dialog" Value="Dialog" />

      <CombinedFile1 Include="*" LanguageId="%(Language.Identity)" Language="%(Language.Value)" />
      <CombinedFile2 Include="@(CombinedFile1)" ModeId="%(Mode.Identity)" Mode="%(Mode.Identity)" />
      <CombinedFile Include="@(CombinedFile2)" BaseId="%(Base.Identity)" Base="%(Base.Value)" />
    </ItemGroup>

    <Exec Command="dotnet new etofile -m %(CombinedFile.Mode) -b %(Base) -lang %(Language) -o $(ArtifactsDir)templates/File_%(LanguageId)-%(ModeId)-%(Base)" />

  </Target>

  <Target Name="TestMacPublishing" DependsOnTargets="Package;SetupNugetConfig">

    <RemoveDir Directories="$(ArtifactsDir)mac-publish"/>

    <!-- install the current version of the templates -->
    <Exec Command="dotnet new -u Eto.Forms.Templates" />
    <Exec Command="dotnet new -i $(PackageOutputPath)Eto.Forms.Templates.$(InformationalVersion).nupkg" />

    <!-- generate project templates -->
    <ItemGroup>
      <Config Include="release" Value="-c Release" />
      <Config Include="debug" Value="-c Debug" />

      <Build Include="build-net4" Create="-f net48" Build="build" />
      <Build Include="build-net6" Create="-f net6.0" Build="build" />
      <Build Include="build-rid-net6" Create="-f net6.0" Build="build -r osx-x64" />
      <Build Include="publish-net6" Create="-f net6.0" Build="publish" />
      <Build Include="publish-rid-net6" Create="-f net6.0" Build="publish -r osx-x64" />

      <Combined Include="combined" Value="-c" />
      <Combined Include="separate" Value="" Build="**/*.Mac.csproj" />

      <CombinedPublish2 Include="*" CombinedId="%(Combined.Identity)" Combined="%(Combined.Value)" CombinedBuild="%(Combined.Build)" />
      <CombinedPublish1 Include="@(CombinedPublish2)" ConfigId="%(Config.Identity)" Config="%(Config.Value)" />
      <CombinedPublish Include="@(CombinedPublish1)" BuildId="%(Build.Identity)" BuildCreate="%(Build.Create)" Build="%(Build.Build)" />
      <CombinedPublish Update="@(CombinedPublish)" OutputPath="$(ArtifactsDir)mac-publish/App-%(BuildId)-%(ConfigId)-%(CombinedId)/" />
    </ItemGroup>

    <Exec Command="dotnet new etoapp %(CombinedPublish.Combined) %(BuildCreate) -o %(OutputPath) &amp;&amp; cd %(OutputPath) &amp;&amp; dotnet %(Build) %(Config) %(CombinedBuild)" EnvironmentVariables="NUGET_PACKAGES=$(ArtifactsDir)packages/" />
  </Target>

  <Target Name="Clean">
    <RemoveDir Directories="$(ArtifactsDir)"/>
    <RemoveDir Directories="$(SourceDir)packages"/>
    <RemoveDir Directories="$(BasePath)samples\packages"/>
  </Target>

</Project>
